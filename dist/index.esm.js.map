{"version":3,"file":"index.esm.js","sources":["../src/core/types.ts","../src/core/constants.ts","../src/converters/color_conversions.ts","../src/core/validators.ts","../src/core/utils.ts","../src/modifiers/color_modifiers.ts"],"sourcesContent":["/**\n * Core type definitions for colorup library\n * Provides comprehensive type safety for all color operations\n */\n\n// Base color format types\nexport interface RgbColor {\n    r: number;\n    g: number;\n    b: number;\n    a?: number;\n}\n\nexport interface HslColor {\n    h: number;\n    s: number;\n    l: number;\n    a?: number;\n}\n\nexport interface HsvColor {\n    h: number;\n    s: number;\n    v: number;\n    a?: number;\n}\n\n// String representations\nexport type HexColor = string; // #RRGGBB or #RGB format\nexport type NamedColor = string; // CSS named colors\nexport type CssColor = string; // Any valid CSS color string\n\n// Union type for all supported color formats\nexport type ColorInput =\n    | HexColor\n    | RgbColor\n    | HslColor\n    | HsvColor\n    | NamedColor\n    | CssColor;\n\n// Normalized internal representation\nexport interface ColorObject {\n    hex: HexColor;\n    rgb: RgbColor;\n    hsl: HslColor;\n    hsv: HsvColor;\n    alpha: number;\n    format: ColorFormat;\n}\n\n// Color format enumeration\nexport enum ColorFormat {\n    HEX = 'hex',\n    RGB = 'rgb',\n    HSL = 'hsl',\n    HSV = 'hsv',\n    NAMED = 'named',\n    CSS = 'css'\n}\n\n// Palette generation types\nexport interface PaletteOptions {\n    steps?: number;\n    includeBase?: boolean;\n    format?: ColorFormat;\n}\n\nexport interface GradientOptions {\n    steps: number;\n    colorSpace?: 'rgb' | 'hsl' | 'lab';\n    easing?: 'linear' | 'ease-in' | 'ease-out' | 'ease-in-out';\n}\n\n// Harmony generation types\nexport type HarmonyType =\n    | 'complementary'\n    | 'analogous'\n    | 'triadic'\n    | 'tetradic'\n    | 'split-complementary'\n    | 'monochromatic';\n\nexport interface HarmonyOptions {\n    type: HarmonyType;\n    steps?: number;\n    angle?: number; // For custom harmony angles\n}\n\n// Accessibility types\nexport enum WcagLevel {\n    AA = 'AA',\n    AAA = 'AAA'\n}\n\nexport enum TextSize {\n    NORMAL = 'normal',\n    LARGE = 'large'\n}\n\nexport interface ContrastResult {\n    ratio: number;\n    grade: 'Fail' | 'AA' | 'AAA';\n    level: WcagLevel | null;\n    passes: {\n        normal: { AA: boolean; AAA: boolean };\n        large: { AA: boolean; AAA: boolean };\n    };\n}\n\n// Export format types\nexport enum ExportFormat {\n    JSON = 'json',\n    CSS = 'css',\n    SCSS = 'scss',\n    LESS = 'less',\n    JS = 'js',\n    TS = 'ts'\n}\n\nexport interface CssVariableOptions {\n    prefix?: string;\n    suffix?: string;\n    includeFallbacks?: boolean;\n    format?: 'kebab-case' | 'camelCase' | 'snake_case';\n}\n\nexport interface DesignTokenOptions {\n    format: ExportFormat;\n    namespace?: string;\n    includeMetadata?: boolean;\n    colorFormats?: ColorFormat[];\n}\n\n// Blend and modifier types\nexport enum BlendMode {\n    NORMAL = 'normal',\n    MULTIPLY = 'multiply',\n    SCREEN = 'screen',\n    OVERLAY = 'overlay',\n    SOFT_LIGHT = 'soft-light',\n    HARD_LIGHT = 'hard-light',\n    COLOR_DODGE = 'color-dodge',\n    COLOR_BURN = 'color-burn',\n    DARKEN = 'darken',\n    LIGHTEN = 'lighten',\n    DIFFERENCE = 'difference',\n    EXCLUSION = 'exclusion'\n}\n\nexport interface BlendOptions {\n    mode?: BlendMode;\n    amount?: number; // 0-1\n}\n\n// Validation types\nexport interface ValidationResult {\n    isValid: boolean;\n    format: ColorFormat | null;\n    errors: string[];\n    normalized?: ColorObject;\n}\n\n// Plugin system types\nexport interface ColorPlugin {\n    name: string;\n    version: string;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\n    methods: Record<string, Function>;\n    install: (colorx: unknown) => void;\n}\n\n// Utility types\nexport type ColorTuple = [number, number, number] | [number, number, number, number];\nexport type ColorMatrix = number[][];\nexport type ColorSpace = 'srgb' | 'p3' | 'rec2020' | 'lab' | 'xyz';\n\n// Error types\nexport class ColorError extends Error {\n    constructor(\n        message: string,\n        public code: string,\n        public input?: unknown\n    ) {\n        super(message);\n        this.name = 'ColorError';\n    }\n}\n\n// Configuration types\nexport interface ColorXConfig {\n    defaultFormat: ColorFormat;\n    precision: number;\n    alphaSupport: boolean;\n    strictValidation: boolean;\n    performanceMode: boolean;\n}","/**\n * Core constant definitions for the colorup library.\n * Centralized values for formats, presets, blending, easing, and validation.\n */\n\nimport {\n  BlendMode,\n  ColorFormat,\n  HarmonyType,\n  ExportFormat,\n  WcagLevel,\n  TextSize,\n} from './types';\n\n// Default configuration\nexport const DEFAULT_CONFIG = {\n  defaultFormat: ColorFormat.HEX,\n  precision: 3,\n  alphaSupport: true,\n  strictValidation: true,\n  performanceMode: false,\n};\n\n// Common easing functions (used for gradients or transitions)\nexport const EASING_FUNCTIONS = [\n  'linear',\n  'ease-in',\n  'ease-out',\n  'ease-in-out',\n] as const;\n\n// Default palette and gradient options\nexport const DEFAULT_PALETTE_STEPS = 5;\nexport const DEFAULT_GRADIENT_STEPS = 10;\nexport const DEFAULT_COLOR_SPACE = 'rgb';\n\nexport const NAMED_COLORS = [\n  'aliceblue',\n  'antiquewhite',\n  'aqua',\n  'aquamarine',\n  'azure',\n  'beige',\n  'bisque',\n  'black',\n  'blanchedalmond',\n  'blue',\n  'blueviolet',\n  'brown',\n  'burlywood',\n  'cadetblue',\n  'chartreuse',\n  'chocolate',\n  'coral',\n  'cornflowerblue',\n  'cornsilk',\n  'crimson',\n  'cyan',\n  'darkblue',\n  'darkcyan',\n  'darkgoldenrod',\n  'darkgray',\n  'darkgreen',\n  'darkgrey',\n  'darkkhaki',\n  'darkmagenta',\n  'darkolivegreen',\n  'darkorange',\n  'darkorchid',\n  'darkred',\n  'darksalmon',\n  'darkseagreen',\n  'darkslateblue',\n  'darkslategray',\n  'darkslategrey',\n  'darkturquoise',\n  'darkviolet',\n  'deeppink',\n  'deepskyblue',\n  'dimgray',\n  'dimgrey',\n  'dodgerblue',\n  'firebrick',\n  'floralwhite',\n  'forestgreen',\n  'fuchsia',\n  'gainsboro',\n  'ghostwhite',\n  'gold',\n  'goldenrod',\n  'gray',\n  'green',\n  'greenyellow',\n  'grey',\n  'honeydew',\n  'hotpink',\n  'indianred',\n  'indigo',\n  'ivory',\n  'khaki',\n  'lavender',\n  'lavenderblush',\n  'lawngreen',\n  'lemonchiffon',\n  'lightblue',\n  'lightcoral',\n  'lightcyan',\n  'lightgoldenrodyellow',\n  'lightgray',\n  'lightgreen',\n  'lightgrey',\n  'lightpink',\n  'lightsalmon',\n  'lightseagreen',\n  'lightskyblue',\n  'lightslategray',\n  'lightslategrey',\n  'lightsteelblue',\n  'lightyellow',\n  'lime',\n  'limegreen',\n  'linen',\n  'magenta',\n  'maroon',\n  'mediumaquamarine',\n  'mediumblue',\n  'mediumorchid',\n  'mediumpurple',\n  'mediumseagreen',\n  'mediumslateblue',\n  'mediumspringgreen',\n  'mediumturquoise',\n  'mediumvioletred',\n  'midnightblue',\n  'mintcream',\n  'mistyrose',\n  'moccasin',\n  'navajowhite',\n  'navy',\n  'oldlace',\n  'olive',\n  'olivedrab',\n  'orange',\n  'orangered',\n  'orchid',\n  'palegoldenrod',\n  'palegreen',\n  'paleturquoise',\n  'palevioletred',\n  'papayawhip',\n  'peachpuff',\n  'peru',\n  'pink',\n  'plum',\n  'powderblue',\n  'purple',\n  'rebeccapurple',\n  'red',\n  'rosybrown',\n  'royalblue',\n  'saddlebrown',\n  'salmon',\n  'sandybrown',\n  'seagreen',\n  'seashell',\n  'sienna',\n  'silver',\n  'skyblue',\n  'slateblue',\n  'slategray',\n  'slategrey',\n  'snow',\n  'springgreen',\n  'steelblue',\n  'tan',\n  'teal',\n  'thistle',\n  'tomato',\n  'turquoise',\n  'violet',\n  'wheat',\n  'white',\n  'whitesmoke',\n  'yellow',\n  'yellowgreen',\n];\n\nexport const NAME_WITH_HEXCODE: Record<string, string> = {\n  aliceblue: '#F0F8FF',\n  antiquewhite: '#FAEBD7',\n  aqua: '#00FFFF',\n  aquamarine: '#7FFFD4',\n  azure: '#F0FFFF',\n  beige: '#F5F5DC',\n  bisque: '#FFE4C4',\n  black: '#000000',\n  blanchedalmond: '#FFEBCD',\n  blue: '#0000FF',\n  blueviolet: '#8A2BE2',\n  brown: '#A52A2A',\n  burlywood: '#DEB887',\n  cadetblue: '#5F9EA0',\n  chartreuse: '#7FFF00',\n  chocolate: '#D2691E',\n  coral: '#FF7F50',\n  cornflowerblue: '#6495ED',\n  cornsilk: '#FFF8DC',\n  crimson: '#DC143C',\n  cyan: '#00FFFF',\n  darkblue: '#00008B',\n  darkcyan: '#008B8B',\n  darkgoldenrod: '#B8860B',\n  darkgray: '#A9A9A9',\n  darkgreen: '#006400',\n  darkgrey: '#A9A9A9',\n  darkkhaki: '#BDB76B',\n  darkmagenta: '#8B008B',\n  darkolivegreen: '#556B2F',\n  darkorange: '#FF8C00',\n  darkorchid: '#9932CC',\n  darkred: '#8B0000',\n  darksalmon: '#E9967A',\n  darkseagreen: '#8FBC8F',\n  darkslateblue: '#483D8B',\n  darkslategray: '#2F4F4F',\n  darkslategrey: '#2F4F4F',\n  darkturquoise: '#00CED1',\n  darkviolet: '#9400D3',\n  deeppink: '#FF1493',\n  deepskyblue: '#00BFFF',\n  dimgray: '#696969',\n  dimgrey: '#696969',\n  dodgerblue: '#1E90FF',\n  firebrick: '#B22222',\n  floralwhite: '#FFFAF0',\n  forestgreen: '#228B22',\n  fuchsia: '#FF00FF',\n  gainsboro: '#DCDCDC',\n  ghostwhite: '#F8F8FF',\n  gold: '#FFD700',\n  goldenrod: '#DAA520',\n  gray: '#808080',\n  green: '#008000',\n  greenyellow: '#ADFF2F',\n  grey: '#808080',\n  honeydew: '#F0FFF0',\n  hotpink: '#FF69B4',\n  indianred: '#CD5C5C',\n  indigo: '#4B0082',\n  ivory: '#FFFFF0',\n  khaki: '#F0E68C',\n  lavender: '#E6E6FA',\n  lavenderblush: '#FFF0F5',\n  lawngreen: '#7CFC00',\n  lemonchiffon: '#FFFACD',\n  lightblue: '#ADD8E6',\n  lightcoral: '#F08080',\n  lightcyan: '#E0FFFF',\n  lightgoldenrodyellow: '#FAFAD2',\n  lightgray: '#D3D3D3',\n  lightgreen: '#90EE90',\n  lightgrey: '#D3D3D3',\n  lightpink: '#FFB6C1',\n  lightsalmon: '#FFA07A',\n  lightseagreen: '#20B2AA',\n  lightskyblue: '#87CEFA',\n  lightslategray: '#778899',\n  lightslategrey: '#778899',\n  lightsteelblue: '#B0C4DE',\n  lightyellow: '#FFFFE0',\n  lime: '#00FF00',\n  limegreen: '#32CD32',\n  linen: '#FAF0E6',\n  magenta: '#FF00FF',\n  maroon: '#800000',\n  mediumaquamarine: '#66CDAA',\n  mediumblue: '#0000CD',\n  mediumorchid: '#BA55D3',\n  mediumpurple: '#9370DB',\n  mediumseagreen: '#3CB371',\n  mediumslateblue: '#7B68EE',\n  mediumspringgreen: '#00FA9A',\n  mediumturquoise: '#48D1CC',\n  mediumvioletred: '#C71585',\n  midnightblue: '#191970',\n  mintcream: '#F5FFFA',\n  mistyrose: '#FFE4E1',\n  moccasin: '#FFE4B5',\n  navajowhite: '#FFDEAD',\n  navy: '#000080',\n  oldlace: '#FDF5E6',\n  olive: '#808000',\n  olivedrab: '#6B8E23',\n  orange: '#FFA500',\n  orangered: '#FF4500',\n  orchid: '#DA70D6',\n  palegoldenrod: '#EEE8AA',\n  palegreen: '#98FB98',\n  paleturquoise: '#AFEEEE',\n  palevioletred: '#DB7093',\n  papayawhip: '#FFEFD5',\n  peachpuff: '#FFDAB9',\n  peru: '#CD853F',\n  pink: '#FFC0CB',\n  plum: '#DDA0DD',\n  powderblue: '#B0E0E6',\n  purple: '#800080',\n  rebeccapurple: '#663399',\n  red: '#FF0000',\n  rosybrown: '#BC8F8F',\n  royalblue: '#4169E1',\n  saddlebrown: '#8B4513',\n  salmon: '#FA8072',\n  sandybrown: '#F4A460',\n  seagreen: '#2E8B57',\n  seashell: '#FFF5EE',\n  sienna: '#A0522D',\n  silver: '#C0C0C0',\n  skyblue: '#87CEEB',\n  slateblue: '#6A5ACD',\n  slategray: '#708090',\n  slategrey: '#708090',\n  snow: '#FFFAFA',\n  springgreen: '#00FF7F',\n  steelblue: '#4682B4',\n  tan: '#D2B48C',\n  teal: '#008080',\n  thistle: '#D8BFD8',\n  tomato: '#FF6347',\n  turquoise: '#40E0D0',\n  violet: '#EE82EE',\n  wheat: '#F5DEB3',\n  white: '#FFFFFF',\n  whitesmoke: '#F5F5F5',\n  yellow: '#FFFF00',\n  yellowgreen: '#9ACD32'\n};\n\n\n// Supported color formats\nexport const SUPPORTED_FORMATS: ColorFormat[] = [\n  ColorFormat.HEX,\n  ColorFormat.RGB,\n  ColorFormat.HSL,\n  ColorFormat.HSV,\n  ColorFormat.NAMED,\n  ColorFormat.CSS,\n];\n\n// Supported export formats\nexport const SUPPORTED_EXPORTS: ExportFormat[] = [\n  ExportFormat.JSON,\n  ExportFormat.CSS,\n  ExportFormat.SCSS,\n  ExportFormat.LESS,\n  ExportFormat.JS,\n  ExportFormat.TS,\n];\n\n// Supported blend modes (can be used to validate or iterate)\nexport const SUPPORTED_BLEND_MODES: BlendMode[] = [\n  BlendMode.NORMAL,\n  BlendMode.MULTIPLY,\n  BlendMode.SCREEN,\n  BlendMode.OVERLAY,\n  BlendMode.SOFT_LIGHT,\n  BlendMode.HARD_LIGHT,\n  BlendMode.COLOR_DODGE,\n  BlendMode.COLOR_BURN,\n  BlendMode.DARKEN,\n  BlendMode.LIGHTEN,\n  BlendMode.DIFFERENCE,\n  BlendMode.EXCLUSION,\n];\n\n// Harmony types\nexport const SUPPORTED_HARMONIES: HarmonyType[] = [\n  'complementary',\n  'analogous',\n  'triadic',\n  'tetradic',\n  'split-complementary',\n  'monochromatic',\n];\n\n// WCAG contrast thresholds\nexport const WCAG_THRESHOLDS = {\n  [TextSize.NORMAL]: {\n    [WcagLevel.AA]: 4.5,\n    [WcagLevel.AAA]: 7,\n  },\n  [TextSize.LARGE]: {\n    [WcagLevel.AA]: 3,\n    [WcagLevel.AAA]: 4.5,\n  },\n};\n\n// Hex shorthand expansion regex\nexport const HEX_SHORTHAND_REGEX = /^#([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n\n// Valid hex color regex (3, 4, 6, or 8 digits)\nexport const VALID_HEX_REGEX = /^#(?:[0-9a-f]{3,4}|[0-9a-f]{6}|[0-9a-f]{8})$/i;\n\n// RGB/HSL input range guards\nexport const RGB_RANGE = { min: 0, max: 255 };\nexport const HUE_RANGE = { min: 0, max: 360 };\nexport const PERCENT_RANGE = { min: 0, max: 100 };\nexport const ALPHA_RANGE = { min: 0, max: 1 };\n\n// Regex for matching hex colors: #RGB, #RRGGBB, #RGBA, #RRGGBBAA\nexport const HEX_COLOR_REGEX =\n  /^#(?:[0-9a-fA-F]{3,4}|[0-9a-fA-F]{6}|[0-9a-fA-F]{8})$/;\n\n// Default plugin metadata (used internally for built-ins)\nexport const CORE_PLUGIN_METADATA = {\n  name: 'core',\n  version: '1.0.0',\n};\n","import { NAME_WITH_HEXCODE } from '../core/constants';\n\nexport function hexToRgb(hex: string): { r: number; g: number; b: number } {\n  hex = hex.replace(/^#/, '');\n  if (hex.length === 3)\n    hex = hex\n      .split('')\n      .map((c) => c + c)\n      .join('');\n  const num = parseInt(hex, 16);\n  return {\n    r: (num >> 16) & 255,\n    g: (num >> 8) & 255,\n    b: num & 255,\n  };\n}\n\nexport function rgbToHex(r: number, g: number, b: number): string {\n  return (\n    '#' +\n    [r, g, b]\n      .map((x) => {\n        const hex = x.toString(16);\n        return hex.length === 1 ? '0' + hex : hex;\n      })\n      .join('')\n  );\n}\n\nexport function hslToRgb(\n  h: number,\n  s: number,\n  l: number\n): { r: number; g: number; b: number } {\n  s /= 100;\n  l /= 100;\n\n  const c = (1 - Math.abs(2 * l - 1)) * s;\n  const x = c * (1 - Math.abs(((h / 60) % 2) - 1));\n  const m = l - c / 2;\n\n  let r = 0,\n    g = 0,\n    b = 0;\n\n  if (0 <= h && h < 60) [r, g, b] = [c, x, 0];\n  else if (h < 120) [r, g, b] = [x, c, 0];\n  else if (h < 180) [r, g, b] = [0, c, x];\n  else if (h < 240) [r, g, b] = [0, x, c];\n  else if (h < 300) [r, g, b] = [x, 0, c];\n  else [r, g, b] = [c, 0, x];\n\n  return {\n    r: Math.round((r + m) * 255),\n    g: Math.round((g + m) * 255),\n    b: Math.round((b + m) * 255),\n  };\n}\n\nexport function rgbToHsl(\n  r: number,\n  g: number,\n  b: number\n): { h: number; s: number; l: number } {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n\n  const max = Math.max(r, g, b),\n    min = Math.min(r, g, b);\n  const l = (max + min) / 2;\n  let h = 0,\n    s = 0;\n\n  if (max !== min) {\n    const d = max - min;\n    s = d / (1 - Math.abs(2 * l - 1));\n    switch (max) {\n      case r:\n        h = ((g - b) / d + (g < b ? 6 : 0)) * 60;\n        break;\n      case g:\n        h = ((b - r) / d + 2) * 60;\n        break;\n      case b:\n        h = ((r - g) / d + 4) * 60;\n        break;\n    }\n  }\n\n  return {\n    h: Math.round(h),\n    s: Math.round(s * 100),\n    l: Math.round(l * 100),\n  };\n}\n\nexport function hexToHsl(hex: string): { h: number; s: number; l: number } {\n  const { r, g, b } = hexToRgb(hex);\n  return rgbToHsl(r, g, b);\n}\n\n\nexport function nameToHex(name: string): string {\n  const color = NAME_WITH_HEXCODE[name.toLowerCase()];\n  if (!color) {\n    throw new Error(`Color name \"${name}\" is not recognized.`);\n  }\n  return color;\n}\n\n\nexport function HexToName(hex: string): string {\n  const color = Object.entries(NAME_WITH_HEXCODE).find(\n    ([, value]) => value.toLowerCase() === hex.toLowerCase()\n  );\n  if (!color) {\n    throw new Error(`Hex code \"${hex}\" is not recognized.`);\n  }\n  return color[0];\n}","/**\n * Validators for color input formats in the colorup library.\n * Includes format checks, range validations, and normalized detection.\n */\n\nimport {\n    RgbColor,\n    HslColor,\n    HsvColor,\n    HexColor,\n    NamedColor,\n    CssColor,\n    ColorFormat,\n    ValidationResult,\n    ColorObject\n} from './types';\n\nimport {\n    NAMED_COLORS,\n    HEX_COLOR_REGEX,\n    RGB_RANGE,\n    PERCENT_RANGE,\n    ALPHA_RANGE\n} from './constants';\n\n/**\n * Check if a string is a valid hex color.\n */\nexport function isHexColor(value: unknown): value is HexColor {\n    return typeof value === 'string' && HEX_COLOR_REGEX.test(value);\n}\n\n/**\n * Check if a string is a valid named color.\n */\nexport function isNamedColor(value: unknown): value is NamedColor {\n    return typeof value === 'string' && NAMED_COLORS.includes(value.toLowerCase());\n}\n\n/**\n * Validate if a number is in alpha range (0 to 1).\n */\nexport function isValidAlpha(value: unknown): value is number {\n    return typeof value === 'number' && value >= ALPHA_RANGE.min && value <= ALPHA_RANGE.max;\n}\n\n/**\n * Validate if a number is in RGB range (0 to 255).\n */\nexport function isValidRgbComponent(value: unknown): value is number {\n    return typeof value === 'number' && value >= RGB_RANGE.min && value <= RGB_RANGE.max;\n}\n\n/**\n * Validate if a number is in percentage range (0 to 100).\n */\nexport function isValidPercentage(value: unknown): value is number {\n    return typeof value === 'number' && value >= PERCENT_RANGE.min && value <= PERCENT_RANGE.max;\n}\n\n/**\n * Validate if a number is a valid hue (0-360).\n */\nexport function isValidHue(value: unknown): value is number {\n    return typeof value === 'number' && value >= 0 && value <= 360;\n}\n\n/**\n * Check if a value is a valid RGB color object.\n */\nexport function isRgbColor(value: unknown): value is RgbColor {\n    if (typeof value !== 'object' || value === null) return false;\n    const { r, g, b, a } = value as RgbColor;\n    return (\n        typeof r === 'number' &&\n        typeof g === 'number' &&\n        typeof b === 'number' &&\n        isValidRgbComponent(r) &&\n        isValidRgbComponent(g) &&\n        isValidRgbComponent(b) &&\n        (a === undefined || isValidAlpha(a))\n    );\n}\n\n/**\n * Check if a value is a valid HSL color object.\n */\nexport function isHslColor(value: unknown): value is HslColor {\n    if (typeof value !== 'object' || value === null) return false;\n    const { h, s, l, a } = value as HslColor;\n    return (\n        typeof h === 'number' &&\n        typeof s === 'number' &&\n        typeof l === 'number' &&\n        isValidHue(h) &&\n        isValidPercentage(s) &&\n        isValidPercentage(l) &&\n        (a === undefined || isValidAlpha(a))\n    );\n}\n\n/**\n * Check if a value is a valid HSV color object.\n */\nexport function isHsvColor(value: unknown): value is HsvColor {\n    if (typeof value !== 'object' || value === null) return false;\n    const { h, s, v, a } = value as HsvColor;\n    return (\n        typeof h === 'number' &&\n        typeof s === 'number' &&\n        typeof v === 'number' &&\n        isValidHue(h) &&\n        isValidPercentage(s) &&\n        isValidPercentage(v) &&\n        (a === undefined || isValidAlpha(a))\n    );\n}\n\n/**\n * Check if a string is a valid CSS color string.\n * (limited validation, assumes it's valid if not hex/named but still string)\n */\nexport function isCssColor(value: unknown): value is CssColor {\n    if (typeof value !== 'string') return false;\n    \n    // Basic CSS color patterns\n    const cssPatterns = [\n        /^rgb\\(\\s*\\d+\\s*,\\s*\\d+\\s*,\\s*\\d+\\s*\\)$/i,\n        /^rgba\\(\\s*\\d+\\s*,\\s*\\d+\\s*,\\s*\\d+\\s*,\\s*[\\d.]+\\s*\\)$/i,\n        /^hsl\\(\\s*\\d+\\s*,\\s*\\d+%\\s*,\\s*\\d+%\\s*\\)$/i,\n        /^hsla\\(\\s*\\d+\\s*,\\s*\\d+%\\s*,\\s*\\d+%\\s*,\\s*[\\d.]+\\s*\\)$/i,\n    ];\n    \n    return cssPatterns.some(pattern => pattern.test(value));\n}\n\n/**\n * Detect the color format.\n */\nexport function detectFormat(value: unknown): ColorFormat | null {\n    if (isHexColor(value)) return ColorFormat.HEX;\n    if (isRgbColor(value)) return ColorFormat.RGB;\n    if (isHslColor(value)) return ColorFormat.HSL;\n    if (isHsvColor(value)) return ColorFormat.HSV;\n    if (isNamedColor(value)) return ColorFormat.NAMED;\n    if (isCssColor(value)) return ColorFormat.CSS;\n    return null;\n}\n\n/**\n * Validate and return metadata for a color input.\n */\nexport function validateColorInput(input: unknown): ValidationResult {\n    const format = detectFormat(input);\n    const errors: string[] = [];\n\n    if (!format) {\n        errors.push('Unrecognized color format');\n    } else {\n        switch (format) {\n            case ColorFormat.HEX:\n                if (!isHexColor(input)) errors.push('Invalid hex color format');\n                break;\n            case ColorFormat.RGB:\n                if (!isRgbColor(input)) errors.push('Invalid RGB color object');\n                break;\n            case ColorFormat.HSL:\n                if (!isHslColor(input)) errors.push('Invalid HSL color object');\n                break;\n            case ColorFormat.HSV:\n                if (!isHsvColor(input)) errors.push('Invalid HSV color object');\n                break;\n            case ColorFormat.NAMED:\n                if (!isNamedColor(input)) errors.push('Invalid named color');\n                break;\n            case ColorFormat.CSS:\n                if (!isCssColor(input)) errors.push('Invalid CSS color string');\n                break;\n        }\n    }\n\n    return {\n        isValid: errors.length === 0,\n        format,\n        errors\n    };\n}\n\n/**\n * Check if a ColorObject is fully normalized.\n */\nexport function isNormalizedColor(obj: unknown): obj is ColorObject {\n    if (typeof obj !== 'object' || obj === null) return false;\n    const color = obj as ColorObject;\n    return (\n        typeof color.hex === 'string' &&\n        isRgbColor(color.rgb) &&\n        isHslColor(color.hsl) &&\n        isHsvColor(color.hsv) &&\n        typeof color.alpha === 'number' &&\n        color.alpha >= 0 &&\n        color.alpha <= 1 &&\n        Object.values(ColorFormat).includes(color.format)\n    );\n}\n\n/**\n * Validate if a value is a valid color input.\n * This checks for all supported formats and returns a detailed result.\n */\nexport function isValidColorInput(value: unknown): ValidationResult {\n    return validateColorInput(value);\n}","/**\n * Core utilities for the colorup library.\n * Includes helpers for clamping, rounding, interpolation, conversion, and string manipulation.\n */\n\nimport { ColorTuple, ColorObject } from './types';\nimport { RGB_RANGE, PERCENT_RANGE, ALPHA_RANGE } from './constants';\n\n/**\n * Clamp a number between min and max.\n */\nexport function clamp(value: number, min: number, max: number): number {\n    return Math.min(Math.max(value, min), max);\n}\n\n/**\n * Round a number to a given number of decimal places.\n */\nexport function round(value: number, precision = 2): number {\n    const factor = 10 ** precision;\n    return Math.round(value * factor) / factor;\n}\n\n/**\n * Convert percentage (0-100) to decimal (0-1).\n */\nexport function percentToDecimal(value: number): number {\n    return clamp(value / 100, 0, 1);\n}\n\n/**\n * Convert decimal (0-1) to percentage (0-100).\n */\nexport function decimalToPercent(value: number): number {\n    return clamp(value * 100, 0, 100);\n}\n\n/**\n * Normalize angle to [0, 360) degrees.\n */\nexport function normalizeAngle(degrees: number): number {\n    return ((degrees % 360) + 360) % 360;\n}\n\n/**\n * Interpolate between two numbers.\n */\nexport function lerp(a: number, b: number, t: number): number {\n    return a + (b - a) * t;\n}\n\n/**\n * Convert a hex character to a two-digit string.\n */\nexport function toHex(value: number): string {\n    return clamp(Math.round(value), 0, 255).toString(16).padStart(2, '0');\n}\n\n/**\n * Pad a string with leading zero if needed.\n */\nexport function padZero(str: string, length = 2): string {\n    return str.padStart(length, '0');\n}\n\n/**\n * Parse a hex string (like \"ff\") to a number.\n */\nexport function hexToDecimal(hex: string): number {\n    return parseInt(hex, 16);\n}\n\n/**\n * Convert a hex string to RGB tuple.\n */\nexport function hexToRgb(hex: string): ColorTuple {\n    let clean = hex.replace('#', '');\n\n    if (clean.length === 3) {\n        clean = clean.split('').map(c => c + c).join('');\n    }\n\n    const r = hexToDecimal(clean.slice(0, 2));\n    const g = hexToDecimal(clean.slice(2, 4));\n    const b = hexToDecimal(clean.slice(4, 6));\n\n    return [r, g, b];\n}\n\n/**\n * Determine if a color is fully transparent.\n */\nexport function isTransparent(color: ColorObject): boolean {\n    return color.alpha === 0;\n}\n\n/**\n * Deep clone a color tuple.\n */\nexport function cloneColorTuple(tuple: ColorTuple): ColorTuple {\n    return [...tuple] as ColorTuple;\n}\n\n/**\n * Convert kebab-case or snake_case to camelCase.\n */\nexport function toCamelCase(str: string): string {\n    return str.replace(/[-_](\\w)/g, (_, c) => c.toUpperCase());\n}\n\n/**\n * Convert camelCase or snake_case to kebab-case.\n */\nexport function toKebabCase(str: string): string {\n    return str\n        .replace(/([a-z0-9])([A-Z])/g, '$1-$2')\n        .replace(/_/g, '-')\n        .toLowerCase();\n}\n\n/**\n * Validate if a number is in RGB range.\n */\nexport function isRgbComponent(value: number): boolean {\n    return value >= RGB_RANGE.min && value <= RGB_RANGE.max;\n}\n\n/**\n * Validate if a number is in percentage range.\n */\nexport function isPercentage(value: number): boolean {\n    return value >= PERCENT_RANGE.min && value <= PERCENT_RANGE.max;\n}\n\n/**\n * Validate if a number is in alpha range.\n */\nexport function isAlpha(value: number): boolean {\n    return value >= ALPHA_RANGE.min && value <= ALPHA_RANGE.max;\n}\n","import { RgbColor } from '../core/types';\nimport { rgbToHsl, hslToRgb } from '../converters/color_conversions';\nimport { clamp } from '../core/utils';\n\n/**\n * Determine if a color is light based on luminance.\n */\nexport function isLight(color: RgbColor): boolean {\n  const { r, g, b } = color;\n  const luminance = 0.299 * r + 0.587 * g + 0.114 * b;\n  return luminance > 186; // Standard threshold\n}\n\n/**\n * Determine if a color is dark based on luminance.\n */\nexport function isDark(color: RgbColor): boolean {\n  return !isLight(color);\n}\n\n/**\n * Adjust brightness by modifying the lightness in HSL.\n */\nexport function adjustBrightness(color: RgbColor, amount: number): RgbColor {\n  const { h, s, l } = rgbToHsl(color.r, color.g, color.b);\n  const newL = clamp(l + amount, 0, 100);\n  const { r, g, b } = hslToRgb(h, s, newL);\n  return { r, g, b, a: color.a ?? 1 };\n}\n\n/**\n * Adjust saturation in HSL space.\n */\nexport function adjustSaturation(color: RgbColor, amount: number): RgbColor {\n  const { h, s, l } = rgbToHsl(color.r, color.g, color.b);\n  const newS = clamp(s + amount, 0, 100);\n  const { r, g, b } = hslToRgb(h, newS, l);\n  return { r, g, b, a: color.a ?? 1 };\n}\n\n/**\n * Lighten a color by increasing lightness.\n */\nexport function lighten(color: RgbColor, amount: number): RgbColor {\n  return adjustBrightness(color, Math.abs(amount));\n}\n\n/**\n * Darken a color by decreasing lightness.\n */\nexport function darken(color: RgbColor, amount: number): RgbColor {\n  return adjustBrightness(color, -Math.abs(amount));\n}\n\n/**\n * Inverts RGB values, keeps alpha intact.\n */\nexport function invertColor(color: RgbColor): RgbColor {\n  return {\n    r: 255 - color.r,\n    g: 255 - color.g,\n    b: 255 - color.b,\n    a: color.a ?? 1,\n  };\n}\n\n/**\n * Converts a color to grayscale using luminance.\n * Returns a new color object with the same alpha.\n */\nexport function grayscale(color: RgbColor): RgbColor {\n  const gray = Math.round(0.299 * color.r + 0.587 * color.g + 0.114 * color.b);\n  return { r: gray, g: gray, b: gray, a: color.a ?? 1 };\n}\n\n"],"names":[],"mappings":"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"}